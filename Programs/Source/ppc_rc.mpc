n_threads = 64
n_parallel = 8

#program.bit_length = 32
#source_record_count=$(ppc_max_record_count)
source_record_count=10000
SOURCE0=0
#source0_column_count=1
#source0_record= Matrix(source_record_count, source0_column_count, sfix)
SOURCE1=1
source1_column_count=1
source1_record= Matrix(source_record_count, source1_column_count, sfix)
#SOURCE2=2

result_value = Array(1, sfix)

#def read_source0_data(party_id):
#    @for_range_opt(source_record_count)
#    def _(i):
#        for j in range(source0_column_count):
#            source0_record[i][j] = sfix.get_input_from(party_id)

def read_source1_data(party_id):
    @for_range_opt(source_record_count)
    def _(i):
        for j in range(source1_column_count):
            source1_record[i][j] = sfix.get_input_from(party_id)

def make_compute_step(party_id):
    @for_range(source_record_count)
    def _(i):
        result_value[0] = source1_record[i][0] + result_value[0]
#read_source0_data(SOURCE0)
read_source1_data(SOURCE1)

make_compute_step(SOURCE0)
final_result = result_value[0].reveal()/source_record_count
print_ln("result = %s", final_result)